# 今抱えている問題と解決策などのメモです.

# 【問題点】
# 【解決策】
# 【実装後記入欄】
# 以上の3つの項目を記入しておけば嬉しいでしょう‥‥。


☆問題解消！
# 【問題点】
	時刻が分かりづらい！（510 = 8:30が直感的に分かるとかエスパーかな？）
# 【解決策】
	24:00形式で直感的に使用できるDateクラスの導入を視野に入れる.
	または,CommonにあるparseTimeStringを有効利用する.
# 【実装後記入欄】
	時間を扱えるTimeクラスを作成した.
	今までと同じように整数型で時間を扱える.（しかし,8:30→510でなく830という形式.）
	途中使用しているString.Formatは以下のサイトを参照している.
	https://www.sejuku.net/blog/14466
	このクラスを使用する限り,8:30を指定していときに8*60+30=510なんて考えないで時間を扱える.

☆問題解消！
# 【問題点】
	作成したTimeクラスはこのままでは計算や比較をおこなうことができない.
# 【解決策】
	演算子のオーバーライドを指定して強制的に計算できるようにしてやる！
	‥‥え、Javaってこういった強引なことってできないの‥‥。
	面倒だけど,計算用のメソッドを追加するしかなさそうだね.
# 【実装後記入欄】
	比較は,Timeクラス内にeqやleなどのメソッドを追加することにしたよー.
	Timeクラスは,時間をtimeOfIntという内部で整数型でなおかつ比較可能な変数で保管している.
	eqやleメソッド内ではそのtimeOfIntを使用して比較しているよ.
	計算ではtimeOfIntがそのまま使用できなかったため,分形式（e.g,2:00→120）に変換する機能が必要だったよ.
	これと,分形式をTimeに変換する機能を作成して足し引き算を行えるようにしました.


☆問題解消！
# 【問題点】
	残業や深夜労働の仕様があまりにも謎すぎる.（endとstartの組み合わせが、Listのindexの一致ってどうなの‥‥？）
# 【解決策】
	endtimeとstarttimeの組み合わせをメンバー変数に持っているようなクラスを作成するのが良さそう.
# 【実装後記入欄】
	時間区間を扱うためのTimePeriodというクラスを導入したことで,
	int[]のインデックス番号による明示的な処理はなくなった.
	

☆問題解決‥‥？
# 【問題点】
	Calculateで似たような処理ばかり繰り返している.
# 【解決策】
	もう少しメソッドにまとめてみる.
# 【実装後記入欄】
	上の問題を解消していったら,Calculateの処理が一切いらなくなってしまった.
	しかし,各クラスの処理で一部似た処理が残っているので,
	形が崩れない程度に処理をまとめておきたいと思う.
	一部繰り返しを排除するために以下のサイトを参考にMapを使用した.
	https://qiita.com/endrugus/items/747c42b813ff9d3a9274
	Mapを使用する方法が,保守性の向上につながっているかは不明である.


☆問題解決‥‥？
# 【問題点】
	設計を実現するために多少無理なクラス作成がされている
	（get/setを少なくするために,多少無理なメソッドを作成していたり
	繰り返しを排除するための機能が,繰り返されていたりする.）
# 【解決策】
	私の再設計のミスなので,設計をやり直す必要がある.
	しかし,時間はない.とりあえずクラスのメソッドをすべて見直す
# 【実装後記入欄】
	どれかをシンプルにすると、どれかが複雑になるの繰り返し。
	もう少し設計のときに配慮すべきでした。
	ただ、ワーク・シフトと実績に分けたことである程度シンプルになったので
	まぁ、問題は解決したということで。（解消はしていない。）


☆仕様変更で妥協！
# 【問題点】
	各クラスの関係がなんか現実世界と違っていて、どこで何をするのかが分かりづらい.
	特に,Calculateなんて,やたらめったら他のクラスに対してゲットセットしてるけど,一体これは何よ？
# 【解決策】
	スケジュール,シフト,実績の3つの概念をメインとする.
	（社員がスケジュールからシフト見たり,実績を書き込んだりするイメージで作成する.
	スケジュールは最低限の実績（労働時間）から詳細な実績を計算する.）
# 【実装後記入欄】
	実績を扱うためのクラスを作成しました。今後は実績の細かい計算や
	その他事項のついか、表示などの作業はこいつが行います。
	ワーク・シフトのクラスはすごくシンプルになった気がします。
	その余波で、TimePeriodクラスがまた一段と大きくなってしまった‥‥。
	スケジュールについては、どちらかと言うと勤次郎が実績作ったりするので、
	今回は、スケジュールクラスの導入はやめる！


